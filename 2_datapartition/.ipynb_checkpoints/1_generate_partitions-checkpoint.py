"""
Generate partitions fromn GRID of TFrecords

Example invocation::

    python 2_datapartition/1_generate_partitions.py
        -r /home/xx/
        -p 46

acocac@gmail.com
"""

import rasterio
from rasterio.features import shapes
import geopandas as gpd
import glob
import os
import numpy as np
from sklearn.cross_validation  import train_test_split
from sklearn.model_selection import ShuffleSplit
import argparse

parser = argparse.ArgumentParser(description='Export gee data to visualise in the GEE code editor')

parser.add_argument('-r','--rootdir', type=str, required=True, help='Dir with input TFrecords.gz generated by GEE')
parser.add_argument('-p','--psize', type=int, required=True, help='patch size value set of the MODIS 250-m data')

def geotiff2geojson(fn):
    with rasterio.open(fn) as src:
        image = src.read(1) # first band
        crs = src.crs
        results = (
            {'properties': {'raster_val': v}, 'geometry': s}
            for i, (s, v)
            in enumerate(
            shapes(image, mask=mask, transform=src.transform)))

    geoms = list(results)
    gdf  = gpd.GeoDataFrame.from_features(geoms, crs=crs)
    return(gdf)

if __name__ == '__main__':
    args = parser.parse_args()
    rootdir = args.rootdir
    psize = args.psize

    indir = os.path.join(rootdir, 'geodata','blocks', str(psize), 'geojson')

    # TODO
    # indir = os.path.join(rootdir, 'geodata','split', str(psize), 'raw', 'geoTIFF')
    #
    # mask = None
    #
    # fileNames = sorted(glob.glob(os.path.join(indir, '*.tif')), key=os.path.getctime)
    #
    # gpd_files = list(map(geotiff2geojson, fileNames))
    #
    # outdir = os.path.dirname(fileNames[0].replace('geoTIFF','geojson'))
    # if not os.path.exists(outdir):
    #     os.makedirs(outdir)
    #
    # #export raw shapes wo partitions
    # if not os.path.isfile(fileNames[0].replace('geoTIFF','geojson').replace('.tif','.geojson')):
    #     gpd_files[0].to_file(driver = 'GeoJSON', filename= fileNames[0].replace('geoTIFF','geojson').replace('.tif','.geojson'))
    # if not os.path.isfile(fileNames[1].replace('geoTIFF','geojson').replace('.tif','.geojson')):
    #     gpd_files[1].to_file(driver = 'GeoJSON', filename= fileNames[1].replace('geoTIFF','geojson').replace('.tif','.geojson'))

    df_patchid = gpd.read_file(os.path.join(indir, 'patchid.geojson'))
    df_fileid = gpd.read_file(os.path.join(indir, 'fileid.geojson'))

    #merge patch and file id gpd files
    df_all = gpd.overlay(df_patchid, df_fileid, how='intersection')

    # cols = ['raster_val', 'raster_val_2']
    cols = ['patch_id', 'file_id']
    df_all[cols] = df_all[cols].applymap(np.int64)

    # df_all['id_fn'] = df_all.raster_val.astype(str) + '_' +  df_all.raster_val_2.astype(str)
    df_all['id_fn'] = df_all.patch_id.astype(str) + '_' + df_all.file_id.astype(str)

    # if not os.path.isfile(fileNames[0].replace('geoTIFF','geojson').replace(os.path.basename(fileNames[0]),'merge.geojson')):
    #     df_all.to_file(driver = 'GeoJSON', filename= fileNames[0].replace('geoTIFF','geojson').replace(os.path.basename(fileNames[0]),'merge.geojson'))

    outdir = os.path.join(rootdir, 'geodata','split', str(psize), 'raw', 'geojson')
    if not os.path.exists(outdir):
        os.makedirs(outdir)

    if not os.path.isfile(os.path.join(outdir,'merge.geojson')):
        df_all.to_file(driver = 'GeoJSON', filename= os.path.join(outdir,'merge.geojson'))

    # partitions
    # evaluation
    train_all, eval_data = train_test_split(df_all['id_fn'], test_size=1 / 6, random_state=42)

    # outdir = os.path.dirname(fileNames[0].replace('geoTIFF','geojson'))

    outdir = os.path.join(rootdir, 'geodata','split', str(psize), 'final', 'tileids')
    if not os.path.exists(outdir):
        os.makedirs(outdir)

    np.savetxt(os.path.join(outdir, "eval.tileids"), np.array(eval_data).astype(str), fmt='%s')

    #train/test
    rs = ShuffleSplit(n_splits=10, test_size=1 / 5, random_state=42)
    i = 0
    for train_index, test_index in rs.split(train_all):
        i = i + 1
        train_all = np.array(train_all)
        train_data = train_all[train_index]
        test_data = train_all[test_index]
        np.savetxt(os.path.join(outdir, "train_fold" + str(i - 1) + ".tileids"), np.array(train_data).astype(str),
                   fmt='%s')
        np.savetxt(os.path.join(outdir, "test_fold" + str(i - 1) + ".tileids"), np.array(test_data).astype(str),
                   fmt='%s')
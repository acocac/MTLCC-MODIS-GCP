"""
Generate partitions fromn GRID of TFrecords

Example invocation::

    python 2_datapartition/3_assign_partition_GZfiles_train.py
        -r /home/xx/
        -y 2009
        -p 24
        -b 3
        -f 0

acocac@gmail.com
"""

import geopandas as gpd
import os
import numpy as np
import argparse
import glob
import pandas as pd
import configparser

parser = argparse.ArgumentParser(description='Export gee data to visualise in the GEE code editor')

parser.add_argument('-r','--rootdir', type=str, required=True, help='Dir with input TFrecords.gz generated by GEE')
parser.add_argument('-y','--tyear', type=str, required=True, help='Target year')
parser.add_argument('-p','--psize', type=int, required=True, help='patch size value set of the MODIS 250-m data')
parser.add_argument('-b','--blocks', type=int, required=True, help='blocks per patch')
parser.add_argument('-f','--fold', type=int, required=True, help='fold')

def parfiles(indir, f):
    traintiles = np.loadtxt(os.path.join(indir, 'train_fold{}.tileids'.format(f)), dtype='str')
    testtiles = np.loadtxt(os.path.join(indir, 'test_fold{}.tileids'.format(f)), dtype='str')
    evaltiles = np.loadtxt(os.path.join(indir, 'eval.tileids'), dtype='str')
    return(traintiles, testtiles, evaltiles)

if __name__ == '__main__':
    args = parser.parse_args()
    rootdir = args.rootdir
    tyear = args.tyear
    psize = args.psize
    fold = args.fold
    blocks = args.blocks

    tileiddir = os.path.join(rootdir, 'geodata','split', str(psize), 'final', 'tileids')

    train, test, eval = parfiles(tileiddir, fold)

    #load merge patch and fileid geojson
    df_all = gpd.read_file(os.path.join(rootdir, 'geodata','split', str(psize), 'raw', 'geojson','merge.geojson'))

    #project dir
    projectdir = os.path.join(rootdir, 'gz', str(int(psize / blocks)), 'MCD12Q1v6')

    #GZ dir
    GZdir = os.path.join(projectdir, 'data' + tyear[2:])

    #list gz files
    filesnm = [os.path.splitext(os.path.basename(x))[0] for x in sorted(glob.glob(os.path.join(GZdir,'*.gz')),key=os.path.getctime)]

    #create tileids
    tilesid_df = pd.DataFrame(filesnm)
    names = {0: 'file', 1: 'id_fn'}

    tilesid_df = tilesid_df.iloc[:, 0].str.split('_', 1, expand=True).rename(columns=names)
    tilesid_df['file_nm'] = tilesid_df['file'].astype(str) + '_' + tilesid_df['id_fn'].astype(str)

    outdir = os.path.join(rootdir, 'gz', str(int(psize / blocks)), 'MCD12Q1v6','tileids')
    if not os.path.exists(outdir):
        os.makedirs(outdir)

    np.savetxt(os.path.join(outdir,'train_fold{}'.format(fold) + '.tileids'), np.array(tilesid_df.loc[tilesid_df['id_fn'].isin(train),'file_nm']).astype(str),fmt='%s')
    np.savetxt(os.path.join(outdir,'test_fold{}'.format(fold) + '.tileids'), np.array(tilesid_df.loc[tilesid_df['id_fn'].isin(test),'file_nm']).astype(str),fmt='%s')
    np.savetxt(os.path.join(outdir,'eval.tileids'), np.array(tilesid_df.loc[tilesid_df['id_fn'].isin(eval),'file_nm']).astype(str),fmt='%s')

    # create geotransform
    if not os.path.isfile(os.path.join(projectdir, 'geotransforms.csv')):
        geo_df = pd.DataFrame(filesnm)

        geo_df['1'] = 0
        geo_df['2'] = 250
        geo_df['3'] = 0
        geo_df['4'] = 0
        geo_df['5'] = 0
        geo_df['6'] = -250
        geo_df['7'] = 32632

        geo_df.to_csv(os.path.join(projectdir, 'geotransforms.csv'), index=None, header=None)

    # create config
    if not os.path.isfile(os.path.join(projectdir, 'dataset.ini')):
        config = configparser.ConfigParser()
        config[tyear] = {'pix250': int(psize / blocks),
                           'nbands250': '11',
                           'nbands500': '5',
                           'nobs': '46',
                           'datadir': 'data' + tyear[2:],
                           'sqlwhere': '"where date is not null and year=2001"',
                           'tiletable': 'tiles23',
                           'fieldtable': 'fields2009',
                           'level': 'L1C'}


        with open(os.path.join(projectdir, 'dataset.ini'), 'w') as configfile:
            config.write(configfile)

    if not os.path.isfile(os.path.join(projectdir, 'classes.txt')):
        classes_pd = pd.DataFrame(np.arange(0, 18))

        classes = ['unknown','Evergreen needleleaf forest','Evergreen broadleaf forest',
                   'Deciduous needleleaf forest','Deciduous broadleaf forest',
                   'Mixed forest','Closed shrublands','Open shrublands',
                   'Woody savannas','Savannas','Grasslands','Permanent wetlands',
                   'Croplands','Urban and built-up','Cropland natural vegetation mosaic',
                   'Snow and ice','Barren or sparsely vegetated','Water']

        classes_pd['1'] = classes

        classes_pd.to_csv(os.path.join(projectdir, 'classes.txt'), index= None, header = None, sep= "|")